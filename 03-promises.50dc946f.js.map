{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAYC,SAASC,cAAc,SACzCF,EAAUG,iBAAiB,UAE3B,SAA4BC,GAC1BA,EAAKC,iBACL,IAAIC,EAAQC,OAAOP,EAAUQ,MAAMC,OAC7BC,EAAOH,OAAOP,EAAUU,KAAKD,OAC7BE,EAASJ,OAAOP,EAAUW,OAAOF,OACnCG,EAAW,EAETC,EAAaC,aAAY,WA4BjC,IAAuBC,EAAUP,EACzBQ,EA1BAL,GAFJC,GAAY,GAGVK,cAAcJ,KAwBGE,EArBLH,EAqBeJ,EArBLF,EAsBpBU,EAAgBE,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BR,aAAY,WACNE,EAEFK,EAAQ,CAAEN,WAAUP,UAGpBc,EAAO,CAAEP,WAAUP,S,GAEpBA,E,KAhCAe,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUP,EAAKgB,EAALhB,MACjBV,EAAA2B,OAAOC,QAAQ,qBAAoCC,OAAfZ,EAAS,QAAYY,OAANnB,EAAM,MAAK,CAC5DoB,cAAc,EACdC,SAAS,EACTC,SAAU,OACVf,SAAU,e,IAGbgB,OAAM,SAAAP,G,IAAGT,EAAQS,EAART,SAAUP,EAAKgB,EAALhB,MAClBV,EAAA2B,OAAOO,QAAQ,oBAAmCL,OAAfZ,EAAS,QAAYY,OAANnB,EAAM,MAAK,CAC3DoB,cAAc,EACdC,SAAS,EACTC,SAAU,OACVf,SAAU,e,IAGhBT,GAASI,E,GACRA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formInput = document.querySelector('.form');\nformInput.addEventListener('submit', startCreatePromise);\n\nfunction startCreatePromise(evnt) {\n  evnt.preventDefault();\n  let delay = Number(formInput.delay.value);\n  const step = Number(formInput.step.value);\n  const amount = Number(formInput.amount.value);\n  let position = 0;\n\n  const intervalId = setInterval(() => {\n    position += 1;\n\n    if (amount < position) {\n      clearInterval(intervalId);\n      return;\n    }\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n          useIcon: false,\n          fontSize: '16px',\n          position: 'left-bottom',\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n          useIcon: false,\n          fontSize: '16px',\n          position: 'left-bottom',\n        });\n      });\n    delay += step;\n  }, step);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setInterval(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formInput","document","querySelector","addEventListener","evnt","preventDefault","delay1","Number","delay","value","step","amount","position1","intervalId","setInterval","position","shouldResolve","clearInterval","Math","random","Promise","resolve","reject","then","param","Notify","success","concat","clickToClose","useIcon","fontSize","catch","failure"],"version":3,"file":"03-promises.50dc946f.js.map"}